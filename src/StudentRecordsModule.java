
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLSyntaxErrorException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author James LaForge
 */

public class StudentRecordsModule extends javax.swing.JFrame {

    private static final String DATABASE_URL = "jdbc:derby://localhost:1527/StudentRecords";
    private static final String USERNAME = "liberty";
    private static final String PASSWORD = "liberty";
    
    private userData userData = null;
    private final List<Assessment> natAssessList = new ArrayList();
    private final List<Assessment> stateAssessList = new ArrayList();
    private final List<Assessment> localAssessList = new ArrayList();
    private final List<AssessmentName> assessmentList = new ArrayList();
    private final List<AcademicUser> studentList = new ArrayList();
    private int userID;
    private int sUserID;
    String teacherName;
    private boolean isEditPressed = false;
    private String teacher;
    private String AssessName;
    
    
    
    /**
     * Creates new form UserInterface
     */
    public StudentRecordsModule() {
        
        try {
            userData = new userData();
            initComponents();
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(rootPane,"Unable to establish connection to database", "SQL Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    private void AuthenticationService() {
    String username = usernameField.getText();
    String password = new String(passwordField.getPassword());

    if (username.isEmpty() || password.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter both username and password.");
        return;
    }

    try (Connection connection = DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD)) {
        PreparedStatement statement = connection.prepareStatement("SELECT role, id FROM users WHERE username = ? AND password = ?");
        statement.setString(1, username);
        statement.setString(2, password);

        ResultSet resultSet = statement.executeQuery();

        if (resultSet.next()) {
            String role = resultSet.getString("role");
            int Id = resultSet.getInt("id");
            userID = Id;
            switch (role) {
                case "Administrator":
                    administratorInterface.setVisible(true);
                    break;
                case "Teacher":
                    teacherInterface.setVisible(true);
                    break;
                case "Student":
                    studentInterface.setVisible(true);
                    break;
                case "Parent":
                    parentInterface.setVisible(true);
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Unexpected role.");
            }
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password.");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while logging in.");
    }
}


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        administratorInterface = new javax.swing.JDialog();
        aUserLabel = new javax.swing.JLabel();
        addUser = new javax.swing.JButton();
        deleteUser = new javax.swing.JButton();
        aUserScrollPane = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        aEnterScores = new javax.swing.JButton();
        createNational = new javax.swing.JButton();
        adAssessLabel = new javax.swing.JLabel();
        adViewAssessments = new javax.swing.JButton();
        parentInterface = new javax.swing.JDialog();
        pSelectStudentLabel = new javax.swing.JLabel();
        pNatLabel = new javax.swing.JLabel();
        pNatScrollPane = new javax.swing.JScrollPane();
        pNatList = new javax.swing.JList<Assessment>();
        pStateLabel = new javax.swing.JLabel();
        pStateScrollPane = new javax.swing.JScrollPane();
        pStateList = new javax.swing.JList<Assessment>();
        pLocalLabel = new javax.swing.JLabel();
        pLocalScrollPane = new javax.swing.JScrollPane();
        pLocalList = new javax.swing.JList<LocalAssessment>();
        pStudentSelectBox = new javax.swing.JComboBox<AcademicUser>();
        studentInterface = new javax.swing.JDialog();
        sNatScrollPane = new javax.swing.JScrollPane();
        sNatList = new javax.swing.JList<Assessment>();
        sNatLabel = new javax.swing.JLabel();
        sStateLabel = new javax.swing.JLabel();
        sStateScrollPane = new javax.swing.JScrollPane();
        sStateList = new javax.swing.JList<Assessment>();
        sLocalLabel = new javax.swing.JLabel();
        sStateScrollPane1 = new javax.swing.JScrollPane();
        sLocalList = new javax.swing.JList<LocalAssessment>();
        teacherInterface = new javax.swing.JDialog();
        tStudentScrollPane = new javax.swing.JScrollPane();
        tStudentList = new javax.swing.JList<AcademicUser>();
        tViewStudentScoreButton = new javax.swing.JButton();
        tViewClassScoreButton = new javax.swing.JButton();
        tCreateLocalButton = new javax.swing.JButton();
        tEnterScoresButton = new javax.swing.JButton();
        tStudentLabel = new javax.swing.JLabel();
        addNewUserInt = new javax.swing.JDialog();
        newInfoLabel = new javax.swing.JLabel();
        newUserLabel = new javax.swing.JLabel();
        newUsernameBox = new javax.swing.JTextField();
        newPassLabel = new javax.swing.JLabel();
        newPasswordBox = new javax.swing.JTextField();
        newFirstLabel = new javax.swing.JLabel();
        newFirstBox = new javax.swing.JTextField();
        newLastLabel = new javax.swing.JLabel();
        newLastBox = new javax.swing.JTextField();
        newRoleBox = new javax.swing.JComboBox<>();
        newRoleLabel = new javax.swing.JLabel();
        newSaveButton = new javax.swing.JButton();
        newCancelButton = new javax.swing.JButton();
        assessInt = new javax.swing.JDialog();
        newAssessNameLabel = new javax.swing.JLabel();
        newAssessNameBox = new javax.swing.JTextField();
        newAssessDateLabel = new javax.swing.JLabel();
        newAssessTypeLabel = new javax.swing.JLabel();
        newAssessTypeBox = new javax.swing.JComboBox<>();
        newAssessDateBox = new javax.swing.JFormattedTextField();
        newAssessSaveButton = new javax.swing.JButton();
        newAssessCancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        assessList = new javax.swing.JList<AssessmentName>();
        jLabel4 = new javax.swing.JLabel();
        assessDeleteButton = new javax.swing.JButton();
        adViewAssessInt = new javax.swing.JDialog();
        adViewButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        adViewStudentList = new javax.swing.JList<AcademicUser>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        adViewClassButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        adViewTeacherList = new javax.swing.JList<AcademicUser>();
        assessSelection = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        adAssessListByClass = new javax.swing.JList<AssessmentName>();
        resultsButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        assessResults = new javax.swing.JList<StudentResults>();
        jLabel10 = new javax.swing.JLabel();
        teacherAssessSelection = new javax.swing.JDialog();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        adAssessListByClass1 = new javax.swing.JList<AssessmentName>();
        resultsButton1 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        assessResults1 = new javax.swing.JList<StudentResults>();
        jLabel12 = new javax.swing.JLabel();
        adminEnterScoresInt = new javax.swing.JDialog();
        jScrollPane8 = new javax.swing.JScrollPane();
        scoresGradesTable = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        scoresAssessList = new javax.swing.JList<AssessmentName>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        scoresSaveButton = new javax.swing.JButton();
        scoresCancelButton = new javax.swing.JButton();
        teacherStudentView = new javax.swing.JDialog();
        sNatScrollPane1 = new javax.swing.JScrollPane();
        sNatList1 = new javax.swing.JList<Assessment>();
        sNatLabel1 = new javax.swing.JLabel();
        sStateLabel1 = new javax.swing.JLabel();
        sStateScrollPane2 = new javax.swing.JScrollPane();
        sStateList1 = new javax.swing.JList<Assessment>();
        sLocalLabel1 = new javax.swing.JLabel();
        sStateScrollPane3 = new javax.swing.JScrollPane();
        sLocalList1 = new javax.swing.JList<LocalAssessment>();
        teacherAssessInt = new javax.swing.JDialog();
        newAssessNameLabel1 = new javax.swing.JLabel();
        newAssessNameBox1 = new javax.swing.JTextField();
        newAssessDateLabel1 = new javax.swing.JLabel();
        newAssessTypeLabel1 = new javax.swing.JLabel();
        newAssessTypeBox1 = new javax.swing.JComboBox<>();
        newAssessDateBox1 = new javax.swing.JFormattedTextField();
        newAssessSaveButton1 = new javax.swing.JButton();
        newAssessCancelButton1 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        assessList1 = new javax.swing.JList<AssessmentName>();
        jLabel15 = new javax.swing.JLabel();
        assessDeleteButton1 = new javax.swing.JButton();
        teacherEnterScoresInt = new javax.swing.JDialog();
        jScrollPane11 = new javax.swing.JScrollPane();
        scoresGradesTable1 = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        scoresAssessList1 = new javax.swing.JList<AssessmentName>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        scoresSaveButton1 = new javax.swing.JButton();
        scoresCancelButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();

        administratorInterface.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        administratorInterface.setModal(true);
        administratorInterface.setSize(new java.awt.Dimension(650, 400));

        aUserLabel.setText("Users");

        addUser.setText("Add User");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        deleteUser.setText("Delete User");
        deleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserActionPerformed(evt);
            }
        });

        userList.setModel(populateUserList());
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        aUserScrollPane.setViewportView(userList);

        aEnterScores.setText("Enter Scores");
        aEnterScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aEnterScoresActionPerformed(evt);
            }
        });

        createNational.setText("Create / Delete  Assessment");
        createNational.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNationalActionPerformed(evt);
            }
        });

        adAssessLabel.setText("Assessments");

        adViewAssessments.setText("View Assessments");
        adViewAssessments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adViewAssessmentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout administratorInterfaceLayout = new javax.swing.GroupLayout(administratorInterface.getContentPane());
        administratorInterface.getContentPane().setLayout(administratorInterfaceLayout);
        administratorInterfaceLayout.setHorizontalGroup(
            administratorInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(administratorInterfaceLayout.createSequentialGroup()
                .addGroup(administratorInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(administratorInterfaceLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(aUserLabel)
                        .addGap(340, 340, 340)
                        .addComponent(adAssessLabel))
                    .addGroup(administratorInterfaceLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(aUserScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(administratorInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(aEnterScores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createNational, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(adViewAssessments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(administratorInterfaceLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(addUser, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(administratorInterfaceLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(deleteUser)))
                .addGap(83, 83, 83))
        );
        administratorInterfaceLayout.setVerticalGroup(
            administratorInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(administratorInterfaceLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(administratorInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aUserLabel)
                    .addComponent(adAssessLabel))
                .addGap(6, 6, 6)
                .addGroup(administratorInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aUserScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(administratorInterfaceLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(createNational)
                        .addGap(18, 18, 18)
                        .addComponent(aEnterScores)
                        .addGap(18, 18, 18)
                        .addComponent(adViewAssessments)))
                .addGap(6, 6, 6)
                .addComponent(addUser)
                .addGap(6, 6, 6)
                .addComponent(deleteUser))
        );

        parentInterface.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        parentInterface.setAlwaysOnTop(true);
        parentInterface.setModal(true);
        parentInterface.setSize(new java.awt.Dimension(700, 700));
        parentInterface.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                parentInterfaceComponentShown(evt);
            }
        });

        pSelectStudentLabel.setText("Select Your Student");

        pNatLabel.setText("National Assessments");

        pNatScrollPane.setViewportView(pNatList);

        pStateLabel.setText("State Assessments");

        pStateScrollPane.setViewportView(pStateList);

        pLocalLabel.setText("Local Assessments");

        pLocalScrollPane.setViewportView(pLocalList);

        pStudentSelectBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pStudentSelectBoxItemStateChanged(evt);
            }
        });
        pStudentSelectBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pStudentSelectBoxMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout parentInterfaceLayout = new javax.swing.GroupLayout(parentInterface.getContentPane());
        parentInterface.getContentPane().setLayout(parentInterfaceLayout);
        parentInterfaceLayout.setHorizontalGroup(
            parentInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parentInterfaceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parentInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pNatScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pStateScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pLocalScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(parentInterfaceLayout.createSequentialGroup()
                .addGap(297, 297, 297)
                .addComponent(pStateLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(parentInterfaceLayout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(pNatLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parentInterfaceLayout.createSequentialGroup()
                .addContainerGap(265, Short.MAX_VALUE)
                .addGroup(parentInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parentInterfaceLayout.createSequentialGroup()
                        .addComponent(pLocalLabel)
                        .addGap(291, 291, 291))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parentInterfaceLayout.createSequentialGroup()
                        .addComponent(pStudentSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(258, 258, 258))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parentInterfaceLayout.createSequentialGroup()
                        .addComponent(pSelectStudentLabel)
                        .addGap(293, 293, 293))))
        );
        parentInterfaceLayout.setVerticalGroup(
            parentInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parentInterfaceLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(pSelectStudentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pStudentSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(pNatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pNatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pStateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pStateScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pLocalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pLocalScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        studentInterface.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        studentInterface.setAlwaysOnTop(true);
        studentInterface.setModal(true);
        studentInterface.setSize(new java.awt.Dimension(600, 600));
        studentInterface.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                studentInterfaceComponentShown(evt);
            }
        });

        sNatScrollPane.setViewportView(sNatList);

        sNatLabel.setText("National Assessments");

        sStateLabel.setText("State Assessments");

        sStateScrollPane.setViewportView(sStateList);

        sLocalLabel.setText("Loccal Assessments");

        sStateScrollPane1.setViewportView(sLocalList);

        javax.swing.GroupLayout studentInterfaceLayout = new javax.swing.GroupLayout(studentInterface.getContentPane());
        studentInterface.getContentPane().setLayout(studentInterfaceLayout);
        studentInterfaceLayout.setHorizontalGroup(
            studentInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentInterfaceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sNatScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                    .addComponent(sStateScrollPane1)
                    .addComponent(sStateScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentInterfaceLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sStateLabel)
                        .addGap(224, 224, 224)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentInterfaceLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sNatLabel)
                .addGap(234, 234, 234))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentInterfaceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sLocalLabel)
                .addGap(233, 233, 233))
        );
        studentInterfaceLayout.setVerticalGroup(
            studentInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentInterfaceLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(sNatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sNatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(sStateLabel)
                .addGap(18, 18, 18)
                .addComponent(sStateScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(sLocalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sStateScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        teacherInterface.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        teacherInterface.setModal(true);
        teacherInterface.setSize(new java.awt.Dimension(450, 400));
        teacherInterface.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                teacherInterfaceComponentShown(evt);
            }
        });

        tStudentScrollPane.setViewportView(tStudentList);

        tViewStudentScoreButton.setText("View Student Scores");
        tViewStudentScoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tViewStudentScoreButtonActionPerformed(evt);
            }
        });

        tViewClassScoreButton.setText("View Class Scores");
        tViewClassScoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tViewClassScoreButtonActionPerformed(evt);
            }
        });

        tCreateLocalButton.setText("Create / Delete Local Assessment");
        tCreateLocalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCreateLocalButtonActionPerformed(evt);
            }
        });

        tEnterScoresButton.setText("Enter Scores");
        tEnterScoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tEnterScoresButtonActionPerformed(evt);
            }
        });

        tStudentLabel.setText("Students");

        javax.swing.GroupLayout teacherInterfaceLayout = new javax.swing.GroupLayout(teacherInterface.getContentPane());
        teacherInterface.getContentPane().setLayout(teacherInterfaceLayout);
        teacherInterfaceLayout.setHorizontalGroup(
            teacherInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherInterfaceLayout.createSequentialGroup()
                .addGroup(teacherInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teacherInterfaceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(teacherInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(teacherInterfaceLayout.createSequentialGroup()
                                .addComponent(tStudentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(teacherInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tCreateLocalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tEnterScoresButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(teacherInterfaceLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(teacherInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tViewStudentScoreButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tViewClassScoreButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(teacherInterfaceLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(tStudentLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        teacherInterfaceLayout.setVerticalGroup(
            teacherInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherInterfaceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tStudentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teacherInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherInterfaceLayout.createSequentialGroup()
                        .addComponent(tCreateLocalButton)
                        .addGap(18, 18, 18)
                        .addComponent(tEnterScoresButton)
                        .addGap(67, 67, 67))
                    .addGroup(teacherInterfaceLayout.createSequentialGroup()
                        .addComponent(tStudentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(tViewStudentScoreButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tViewClassScoreButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addNewUserInt.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addNewUserInt.setAlwaysOnTop(true);
        addNewUserInt.setModal(true);
        addNewUserInt.setName("New User Information"); // NOI18N
        addNewUserInt.setSize(new java.awt.Dimension(500, 400));

        newInfoLabel.setText("New User Information");

        newUserLabel.setText("Username");

        newPassLabel.setText("Password");

        newFirstLabel.setText("First Name");

        newLastLabel.setText("Last Name");

        newLastBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLastBoxActionPerformed(evt);
            }
        });

        newRoleBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Administrator", "Teacher", "Parent", "Student" }));
        newRoleBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRoleBoxActionPerformed(evt);
            }
        });

        newRoleLabel.setText("Role");

        newSaveButton.setText("Save");
        newSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSaveButtonActionPerformed(evt);
            }
        });

        newCancelButton.setText("Cancel");
        newCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addNewUserIntLayout = new javax.swing.GroupLayout(addNewUserInt.getContentPane());
        addNewUserInt.getContentPane().setLayout(addNewUserIntLayout);
        addNewUserIntLayout.setHorizontalGroup(
            addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewUserIntLayout.createSequentialGroup()
                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addNewUserIntLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newCancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(newSaveButton))
                    .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(addNewUserIntLayout.createSequentialGroup()
                            .addGap(157, 157, 157)
                            .addComponent(newInfoLabel))
                        .addGroup(addNewUserIntLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(newFirstLabel)
                                .addComponent(newPassLabel)
                                .addComponent(newUserLabel))
                            .addGap(18, 18, 18)
                            .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(newUsernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(newPasswordBox)
                                    .addComponent(newFirstBox, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))))
                        .addGroup(addNewUserIntLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(newLastLabel)
                                .addComponent(newRoleLabel))
                            .addGap(18, 18, 18)
                            .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(newRoleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(newLastBox)))))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        addNewUserIntLayout.setVerticalGroup(
            addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewUserIntLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newInfoLabel)
                .addGap(18, 18, 18)
                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newUserLabel)
                    .addComponent(newUsernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPassLabel)
                    .addComponent(newPasswordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newFirstLabel)
                    .addComponent(newFirstBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newLastLabel)
                    .addComponent(newLastBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newRoleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newRoleLabel))
                .addGap(18, 18, 18)
                .addGroup(addNewUserIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newSaveButton)
                    .addComponent(newCancelButton))
                .addContainerGap(111, Short.MAX_VALUE))
        );

        assessInt.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        assessInt.setModal(true);
        assessInt.setSize(new java.awt.Dimension(1000, 300));
        assessInt.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                assessIntComponentShown(evt);
            }
        });

        newAssessNameLabel.setText("Assessment Name:");

        newAssessNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessNameBoxActionPerformed(evt);
            }
        });

        newAssessDateLabel.setText("Assessment Date:");

        newAssessTypeLabel.setText("Assessment Type:");

        newAssessTypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "National", "State", "Local" }));
        newAssessTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessTypeBoxActionPerformed(evt);
            }
        });

        newAssessDateBox.setText("YYYY-MM-DD");
        newAssessDateBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newAssessDateBoxMouseClicked(evt);
            }
        });
        newAssessDateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessDateBoxActionPerformed(evt);
            }
        });

        newAssessSaveButton.setText("Save");
        newAssessSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessSaveButtonActionPerformed(evt);
            }
        });

        newAssessCancelButton.setText("Cancel");
        newAssessCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessCancelButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(assessList);

        jLabel4.setText("Assessments");

        assessDeleteButton.setText("Delete");
        assessDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assessDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout assessIntLayout = new javax.swing.GroupLayout(assessInt.getContentPane());
        assessInt.getContentPane().setLayout(assessIntLayout);
        assessIntLayout.setHorizontalGroup(
            assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assessIntLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newAssessNameLabel)
                    .addComponent(newAssessDateLabel)
                    .addComponent(newAssessTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newAssessNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(assessIntLayout.createSequentialGroup()
                        .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newAssessCancelButton)
                            .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(newAssessTypeBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newAssessDateBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(assessDeleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newAssessSaveButton)))
                .addGap(98, 98, 98)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assessIntLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(210, 210, 210))
        );
        assessIntLayout.setVerticalGroup(
            assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assessIntLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(assessIntLayout.createSequentialGroup()
                        .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessNameLabel)
                            .addComponent(newAssessNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newAssessDateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newAssessTypeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(assessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessSaveButton)
                            .addComponent(newAssessCancelButton)
                            .addComponent(assessDeleteButton))))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        adViewAssessInt.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        adViewAssessInt.setModal(true);
        adViewAssessInt.setSize(new java.awt.Dimension(820, 550));
        adViewAssessInt.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                adViewAssessIntComponentShown(evt);
            }
        });

        adViewButton.setText("View");
        adViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adViewButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(adViewStudentList);

        jLabel5.setText("View By Student");

        jLabel6.setText("Select Student and Click View");

        jLabel7.setText("View By Class");

        jLabel8.setText("Select Teacher and Click View");

        adViewClassButton.setText("View");
        adViewClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adViewClassButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(adViewTeacherList);

        javax.swing.GroupLayout adViewAssessIntLayout = new javax.swing.GroupLayout(adViewAssessInt.getContentPane());
        adViewAssessInt.getContentPane().setLayout(adViewAssessIntLayout);
        adViewAssessIntLayout.setHorizontalGroup(
            adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adViewAssessIntLayout.createSequentialGroup()
                .addGroup(adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(jLabel5))
                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                        .addGap(312, 312, 312)
                        .addComponent(jLabel7))
                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                        .addGroup(adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(adViewAssessIntLayout.createSequentialGroup()
                                    .addGap(96, 96, 96)
                                    .addComponent(adViewButton)
                                    .addGap(155, 155, 155))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adViewAssessIntLayout.createSequentialGroup()
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6)
                                    .addGap(111, 111, 111)))
                            .addGroup(adViewAssessIntLayout.createSequentialGroup()
                                .addGroup(adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(jLabel8))
                                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addComponent(adViewClassButton)))
                                .addGap(111, 111, 111)))
                        .addGroup(adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        adViewAssessIntLayout.setVerticalGroup(
            adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adViewAssessIntLayout.createSequentialGroup()
                .addGroup(adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adViewButton))
                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(73, 73, 73)
                .addComponent(jLabel7)
                .addGroup(adViewAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adViewClassButton))
                    .addGroup(adViewAssessIntLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        assessSelection.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        assessSelection.setModal(true);
        assessSelection.setSize(new java.awt.Dimension(1450, 425));
        assessSelection.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                assessSelectionComponentShown(evt);
            }
        });

        jLabel9.setText("Select Assessment ");

        jScrollPane4.setViewportView(adAssessListByClass);

        resultsButton.setText("Get Results");
        resultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsButtonActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(assessResults);

        jLabel10.setText("Results");

        javax.swing.GroupLayout assessSelectionLayout = new javax.swing.GroupLayout(assessSelection.getContentPane());
        assessSelection.getContentPane().setLayout(assessSelectionLayout);
        assessSelectionLayout.setHorizontalGroup(
            assessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assessSelectionLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(338, 338, 338))
            .addGroup(assessSelectionLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(assessSelectionLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(resultsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        assessSelectionLayout.setVerticalGroup(
            assessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assessSelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(assessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(assessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(18, 18, 18)
                .addComponent(resultsButton)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        teacherAssessSelection.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        teacherAssessSelection.setModal(true);
        teacherAssessSelection.setSize(new java.awt.Dimension(1450, 425));
        teacherAssessSelection.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                teacherAssessSelectionComponentShown(evt);
            }
        });

        jLabel11.setText("Select Assessment ");

        jScrollPane6.setViewportView(adAssessListByClass1);

        resultsButton1.setText("Get Results");
        resultsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsButton1ActionPerformed(evt);
            }
        });

        jScrollPane7.setViewportView(assessResults1);

        jLabel12.setText("Results");

        javax.swing.GroupLayout teacherAssessSelectionLayout = new javax.swing.GroupLayout(teacherAssessSelection.getContentPane());
        teacherAssessSelection.getContentPane().setLayout(teacherAssessSelectionLayout);
        teacherAssessSelectionLayout.setHorizontalGroup(
            teacherAssessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherAssessSelectionLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(338, 338, 338))
            .addGroup(teacherAssessSelectionLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(teacherAssessSelectionLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(resultsButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        teacherAssessSelectionLayout.setVerticalGroup(
            teacherAssessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherAssessSelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teacherAssessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teacherAssessSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addGap(18, 18, 18)
                .addComponent(resultsButton1)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        adminEnterScoresInt.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        adminEnterScoresInt.setModal(true);
        adminEnterScoresInt.setSize(new java.awt.Dimension(1300, 675));
        adminEnterScoresInt.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                adminEnterScoresIntComponentShown(evt);
            }
        });

        scoresGradesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        scoresGradesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(scoresGradesTable);

        scoresAssessList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                scoresAssessListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(scoresAssessList);

        jLabel13.setText("Chose the Assessment ");

        jLabel14.setText("Enter Grades");

        scoresSaveButton.setText("Save");
        scoresSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoresSaveButtonActionPerformed(evt);
            }
        });

        scoresCancelButton.setText("Cancel");
        scoresCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoresCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminEnterScoresIntLayout = new javax.swing.GroupLayout(adminEnterScoresInt.getContentPane());
        adminEnterScoresInt.getContentPane().setLayout(adminEnterScoresIntLayout);
        adminEnterScoresIntLayout.setHorizontalGroup(
            adminEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminEnterScoresIntLayout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(299, 299, 299))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminEnterScoresIntLayout.createSequentialGroup()
                .addGroup(adminEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(adminEnterScoresIntLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scoresCancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scoresSaveButton))
                    .addGroup(adminEnterScoresIntLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(102, 102, 102))
        );
        adminEnterScoresIntLayout.setVerticalGroup(
            adminEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminEnterScoresIntLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(adminEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(adminEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoresSaveButton)
                    .addComponent(scoresCancelButton))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        teacherStudentView.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        teacherStudentView.setAlwaysOnTop(true);
        teacherStudentView.setModal(true);
        teacherStudentView.setSize(new java.awt.Dimension(600, 600));
        teacherStudentView.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                teacherStudentViewComponentShown(evt);
            }
        });

        sNatScrollPane1.setViewportView(sNatList1);

        sNatLabel1.setText("National Assessments");

        sStateLabel1.setText("State Assessments");

        sStateScrollPane2.setViewportView(sStateList1);

        sLocalLabel1.setText("Loccal Assessments");

        sStateScrollPane3.setViewportView(sLocalList1);

        javax.swing.GroupLayout teacherStudentViewLayout = new javax.swing.GroupLayout(teacherStudentView.getContentPane());
        teacherStudentView.getContentPane().setLayout(teacherStudentViewLayout);
        teacherStudentViewLayout.setHorizontalGroup(
            teacherStudentViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherStudentViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teacherStudentViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sNatScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                    .addComponent(sStateScrollPane3)
                    .addComponent(sStateScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherStudentViewLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sStateLabel1)
                        .addGap(224, 224, 224)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherStudentViewLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sNatLabel1)
                .addGap(234, 234, 234))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherStudentViewLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sLocalLabel1)
                .addGap(233, 233, 233))
        );
        teacherStudentViewLayout.setVerticalGroup(
            teacherStudentViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherStudentViewLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(sNatLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sNatScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(sStateLabel1)
                .addGap(18, 18, 18)
                .addComponent(sStateScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(sLocalLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sStateScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        teacherAssessInt.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        teacherAssessInt.setModal(true);
        teacherAssessInt.setSize(new java.awt.Dimension(1000, 300));
        teacherAssessInt.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                teacherAssessIntComponentShown(evt);
            }
        });

        newAssessNameLabel1.setText("Assessment Name:");

        newAssessNameBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessNameBox1ActionPerformed(evt);
            }
        });

        newAssessDateLabel1.setText("Assessment Date:");

        newAssessTypeLabel1.setText("Assessment Type:");

        newAssessTypeBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Local" }));
        newAssessTypeBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessTypeBox1ActionPerformed(evt);
            }
        });

        newAssessDateBox1.setText("YYYY-MM-DD");
        newAssessDateBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newAssessDateBox1MouseClicked(evt);
            }
        });
        newAssessDateBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessDateBox1ActionPerformed(evt);
            }
        });

        newAssessSaveButton1.setText("Save");
        newAssessSaveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessSaveButton1ActionPerformed(evt);
            }
        });

        newAssessCancelButton1.setText("Cancel");
        newAssessCancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssessCancelButton1ActionPerformed(evt);
            }
        });

        jScrollPane10.setViewportView(assessList1);

        jLabel15.setText("Assessments");

        assessDeleteButton1.setText("Delete");
        assessDeleteButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assessDeleteButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teacherAssessIntLayout = new javax.swing.GroupLayout(teacherAssessInt.getContentPane());
        teacherAssessInt.getContentPane().setLayout(teacherAssessIntLayout);
        teacherAssessIntLayout.setHorizontalGroup(
            teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherAssessIntLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newAssessNameLabel1)
                    .addComponent(newAssessDateLabel1)
                    .addComponent(newAssessTypeLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newAssessNameBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(teacherAssessIntLayout.createSequentialGroup()
                        .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newAssessCancelButton1)
                            .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(newAssessTypeBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newAssessDateBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(assessDeleteButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newAssessSaveButton1)))
                .addGap(98, 98, 98)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherAssessIntLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(210, 210, 210))
        );
        teacherAssessIntLayout.setVerticalGroup(
            teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherAssessIntLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(teacherAssessIntLayout.createSequentialGroup()
                        .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessNameLabel1)
                            .addComponent(newAssessNameBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessDateBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newAssessDateLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessTypeBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newAssessTypeLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherAssessIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newAssessSaveButton1)
                            .addComponent(newAssessCancelButton1)
                            .addComponent(assessDeleteButton1))))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        teacherEnterScoresInt.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        teacherEnterScoresInt.setModal(true);
        teacherEnterScoresInt.setSize(new java.awt.Dimension(1300, 675));
        teacherEnterScoresInt.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                teacherEnterScoresIntComponentShown(evt);
            }
        });

        scoresGradesTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        scoresGradesTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane11.setViewportView(scoresGradesTable1);

        scoresAssessList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                scoresAssessList1ValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(scoresAssessList1);

        jLabel16.setText("Chose the Assessment ");

        jLabel17.setText("Enter Grades");

        scoresSaveButton1.setText("Save");
        scoresSaveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoresSaveButton1ActionPerformed(evt);
            }
        });

        scoresCancelButton1.setText("Cancel");
        scoresCancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoresCancelButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teacherEnterScoresIntLayout = new javax.swing.GroupLayout(teacherEnterScoresInt.getContentPane());
        teacherEnterScoresInt.getContentPane().setLayout(teacherEnterScoresIntLayout);
        teacherEnterScoresIntLayout.setHorizontalGroup(
            teacherEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherEnterScoresIntLayout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addGap(299, 299, 299))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherEnterScoresIntLayout.createSequentialGroup()
                .addGroup(teacherEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(teacherEnterScoresIntLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scoresCancelButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scoresSaveButton1))
                    .addGroup(teacherEnterScoresIntLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(102, 102, 102))
        );
        teacherEnterScoresIntLayout.setVerticalGroup(
            teacherEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherEnterScoresIntLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(teacherEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teacherEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(teacherEnterScoresIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoresSaveButton1)
                    .addComponent(scoresCancelButton1))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(300, 300));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Welcome!");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Username");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Password");

        loginButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addGap(9, 9, 9)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(loginButton)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        AuthenticationService();        
    }//GEN-LAST:event_loginButtonActionPerformed

    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
       addNewUserInt.setVisible(true);
    }//GEN-LAST:event_addUserActionPerformed

    private void createNationalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNationalActionPerformed
       assessInt.setVisible(true); 
      
    }//GEN-LAST:event_createNationalActionPerformed

    private void adViewAssessmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adViewAssessmentsActionPerformed
        adViewAssessInt.setVisible(true);
    }//GEN-LAST:event_adViewAssessmentsActionPerformed

    private void tCreateLocalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCreateLocalButtonActionPerformed
       teacherAssessInt.setVisible(true);
    }//GEN-LAST:event_tCreateLocalButtonActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        AuthenticationService();
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
      
    }//GEN-LAST:event_userListValueChanged

    private void deleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserActionPerformed
        User user = userList.getSelectedValue();
        int currentUserIndex = userList.getSelectedIndex();
        
        int confirm = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete this User?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                
                    
                
        
        try {
            if ( userList.getSelectedValue() != null){
                String role = user.getRole(); //gets current users role in order to select corret deletion method.
            if (role.equals("Administrator") || role.equals("Teacher")){
                userData.deleteUser(user);
            }
            if (role.equals("Parent")){
                userData.deleteParent(user);
            }
            if (role.equals("Student")){
                userData.deleteStudent(user);
                            
            }
                
            
            userList.setModel(populateUserList());
            if (currentUserIndex > userList.getModel().getSize() - 1) {
                currentUserIndex = userList.getModel().getSize() - 1;
                userList.setSelectedIndex(currentUserIndex);
            } else {
                userList.setSelectedIndex(currentUserIndex);
            }
            }
            
        } catch (SQLSyntaxErrorException ex) {
            System.err.println("SQL Syntax Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(rootPane, "Unable to delete user.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            System.err.println("SQL Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(rootPane, "Unable to delete user.", "SQL Error", JOptionPane.ERROR_MESSAGE);
            // Handle other SQLExceptions 
        } catch (Exception ex) {
            System.err.println("Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(rootPane, "Unable to delete user.", "SQL Error", JOptionPane.ERROR_MESSAGE);
            // Handle any other exceptions 
        }
            }
          
    
        
            
           
    }//GEN-LAST:event_deleteUserActionPerformed

    private void newRoleBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoleBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newRoleBoxActionPerformed

    private void newLastBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLastBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newLastBoxActionPerformed

    private void newSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSaveButtonActionPerformed
        try {        
                User user = new User();
                user.setUserName(newUsernameBox.getText());
                user.setUserPassword(newPasswordBox.getText());
                user.setFirstName(newFirstBox.getText());
                user.setLastName(newLastBox.getText());
                user.setRole(newRoleBox.getSelectedItem().toString());

                int userID = userData.addUser(user);
                user.setid(userID);
                
                
                
                userList.setModel(populateUserList());
                addNewUserInt.setVisible(false);
                userList.setRequestFocusEnabled(true);
                userList.setSelectedIndex(findUserIndex(user));
                
                
            }catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(rootPane, "Unable to save user.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_newSaveButtonActionPerformed

    private void newCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCancelButtonActionPerformed
        addNewUserInt.dispose();        
    }//GEN-LAST:event_newCancelButtonActionPerformed

    private void newAssessNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newAssessNameBoxActionPerformed

    private void newAssessTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessTypeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newAssessTypeBoxActionPerformed

    private void newAssessCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessCancelButtonActionPerformed
        assessInt.setVisible(false);
        administratorInterface.setVisible(true);
        isEditPressed = false;
        clearAssessIntBoxes();
    }//GEN-LAST:event_newAssessCancelButtonActionPerformed

    private void newAssessDateBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessDateBoxActionPerformed

    }//GEN-LAST:event_newAssessDateBoxActionPerformed

    private void newAssessDateBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newAssessDateBoxMouseClicked
                
        newAssessDateBox.setText("");
    }//GEN-LAST:event_newAssessDateBoxMouseClicked

    private void studentInterfaceComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_studentInterfaceComponentShown
    sNatList.setModel(populateNatAssessList());
    sStateList.setModel(populateStateAssessList());
    sLocalList.setModel(populateLocalAssessList());
    }//GEN-LAST:event_studentInterfaceComponentShown

    private void parentInterfaceComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_parentInterfaceComponentShown
   try {
       int parentID = userData.getParentIdByUserId(userID);
       pStudentSelectBox.setModel(populateStudentComboBox(parentID));
    } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of users.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
    
        pNatList.setModel(populateParentNatAssessList());
        pStateList.setModel(populateParentStateAssessList());
        pLocalList.setModel(populateParentLocalAssessList());
       
    }//GEN-LAST:event_parentInterfaceComponentShown

    private void pStudentSelectBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pStudentSelectBoxMouseClicked
        

    }//GEN-LAST:event_pStudentSelectBoxMouseClicked

    private void pStudentSelectBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pStudentSelectBoxItemStateChanged
        pNatList.setModel(populateParentNatAssessList());
        pStateList.setModel(populateParentStateAssessList());
        pLocalList.setModel(populateParentLocalAssessList());
     
    }//GEN-LAST:event_pStudentSelectBoxItemStateChanged

    private void newAssessSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessSaveButtonActionPerformed
   
    String dateStr = newAssessDateBox.getText();

    if (!isValidDate(dateStr)) {
        JOptionPane.showMessageDialog(rootPane, "Please enter a valid date in the format YYYY-MM-DD.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        AssessmentName assessmentName = new AssessmentName();
        assessmentName.setAssessment_name(newAssessNameBox.getText());
        assessmentName.setDate(dateStr);
        assessmentName.setType(newAssessTypeBox.getSelectedItem().toString());

        int assessmentNameID = userData.addAssessmentName(assessmentName);

        clearAssessIntBoxes();
        assessList.setModel(populateAssessList());
    } catch (SQLException ex) {
        System.err.println(ex);
        JOptionPane.showMessageDialog(rootPane, "Unable to save assessment.", "SQL Error", JOptionPane.ERROR_MESSAGE);
    }

           


    }//GEN-LAST:event_newAssessSaveButtonActionPerformed

    private void assessIntComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_assessIntComponentShown
    assessList.setModel(populateAssessList());
    }//GEN-LAST:event_assessIntComponentShown

    private void assessDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assessDeleteButtonActionPerformed
        
        AssessmentName selectedAssessment = assessList.getSelectedValue();
            if (selectedAssessment == null) {
                JOptionPane.showMessageDialog(rootPane, "Please select an assessment to delete.", "Selection Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String selectedAssessmentName = selectedAssessment.getAssessment_name();

            int confirm = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete this assessment?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    userData.deleteAssessmentName(selectedAssessmentName);
                    // Refresh the list after deletion
                    assessList.setModel(populateAssessList());
                    JOptionPane.showMessageDialog(rootPane, "Assessment deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    System.err.println(ex);
                    JOptionPane.showMessageDialog(rootPane, "Unable to delete assessment.", "SQL Error", JOptionPane.ERROR_MESSAGE);
                }
            }  
    }//GEN-LAST:event_assessDeleteButtonActionPerformed

    private void adViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adViewButtonActionPerformed
        
        
    AcademicUser selectedStudent = adViewStudentList.getSelectedValue();
    
        if (selectedStudent != null) {
        userID = selectedStudent.getSUserID();
    } else {
        
        JOptionPane.showMessageDialog(null, 
            "Please select a student!", 
            "Selection Error", 
            JOptionPane.ERROR_MESSAGE);
    }
     
        sNatList.setModel(populateNatAssessList());
        sStateList.setModel(populateStateAssessList());
        sLocalList.setModel(populateLocalAssessList());

        studentInterface.setVisible(true);
    }//GEN-LAST:event_adViewButtonActionPerformed

    private void adViewAssessIntComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_adViewAssessIntComponentShown
        adViewStudentList.setModel(populateStudentList());
        adViewTeacherList.setModel(populateTeacherList());
        
    }//GEN-LAST:event_adViewAssessIntComponentShown

    private void adViewClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adViewClassButtonActionPerformed
        AcademicUser selectedTeacher = adViewTeacherList.getSelectedValue();
    
        if (selectedTeacher != null) {
            assessSelection.setVisible(true);
    } else {
        
        JOptionPane.showMessageDialog(null, 
            "Please select a teacher!", 
            "Selection Error", 
            JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_adViewClassButtonActionPerformed

    private void resultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsButtonActionPerformed
     AssessmentName selectedAssessment = adAssessListByClass.getSelectedValue();
     AcademicUser selectedTeacher = adViewTeacherList.getSelectedValue();  

    if (selectedAssessment != null) {  
        StudentResults inputStudent = new StudentResults();
        inputStudent.setAssessment_name(selectedAssessment.getAssessment_name());
        inputStudent.setTeacher(selectedTeacher.getName());  

        assessResults.setModel(populateStudentResults(inputStudent));
    } else {
        JOptionPane.showMessageDialog(null, 
            "Please select an assessment!", 
            "Selection Error", 
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_resultsButtonActionPerformed

    private void assessSelectionComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_assessSelectionComponentShown
        adAssessListByClass.setModel(populateAssessList());
    }//GEN-LAST:event_assessSelectionComponentShown

    private void tViewStudentScoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tViewStudentScoreButtonActionPerformed
       
        
    AcademicUser selectedStudent = tStudentList.getSelectedValue();
    
        if (selectedStudent != null) {
        sUserID = selectedStudent.getSUserID();
    } else {
        
        JOptionPane.showMessageDialog(null, 
            "Please select a student!", 
            "Selection Error", 
            JOptionPane.ERROR_MESSAGE);
    }
     
               

        teacherStudentView.setVisible(true);       
    }//GEN-LAST:event_tViewStudentScoreButtonActionPerformed

    private void teacherInterfaceComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_teacherInterfaceComponentShown
        tStudentList.setModel(populateTeacherClass(userID));
    }//GEN-LAST:event_teacherInterfaceComponentShown

    private void tViewClassScoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tViewClassScoreButtonActionPerformed
        adAssessListByClass1.setModel(populateAssessList());
        teacherAssessSelection.setVisible(true);        
    }//GEN-LAST:event_tViewClassScoreButtonActionPerformed

    private void resultsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsButton1ActionPerformed

        AssessmentName selectedAssessment = adAssessListByClass1.getSelectedValue();
        String selectedTeacher = null;

        try {
            selectedTeacher = userData.getTeacherFullNameById(userID);
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(null, 
                "Failed to fetch teacher details.", 
                "SQL Error", 
                JOptionPane.ERROR_MESSAGE);
            return; // exit the method to prevent further processing
        }

        if (selectedAssessment != null && selectedTeacher != null) {
            StudentResults inputStudent = new StudentResults();
            inputStudent.setAssessment_name(selectedAssessment.getAssessment_name());
            inputStudent.setTeacher(selectedTeacher);  

            assessResults1.setModel(populateStudentResults(inputStudent));
        } else {
            JOptionPane.showMessageDialog(null, 
                "Please select an assessment and ensure teacher details are available!", 
                "Selection Error", 
                JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_resultsButton1ActionPerformed

    private void teacherAssessSelectionComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_teacherAssessSelectionComponentShown
        adAssessListByClass.setModel(populateAssessList());
    }//GEN-LAST:event_teacherAssessSelectionComponentShown

    private void scoresSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoresSaveButtonActionPerformed
                                                        
        try {                                                 
            // Extract the selected value as AssessmentName object
            AssessmentName selectedAssessmentObject = (AssessmentName) scoresAssessList.getSelectedValue();

            // Get the name from the AssessmentName object
            String selectedAssessment = selectedAssessmentObject.getAssessment_name();

            // Fetch assessment details right after the selected assessment is known
            AssessmentDetails details = null;
            try {
                details = userData.getAssessmentDetailsByName(selectedAssessment);
            } catch (SQLException ex) {
                Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Failed to get details for the selected assessment.", "Data Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (details == null) {
                JOptionPane.showMessageDialog(rootPane, "Assessment details not found for " + selectedAssessment, "Data Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            List<StudentSaveScore> studentScoresForSave = new ArrayList<>();
            for (int i = 0; i < scoresGradesTable.getRowCount(); i++) {
                try {
                    String name = scoresGradesTable.getValueAt(i, 0).toString();
                    String scoreStr = scoresGradesTable.getValueAt(i, 1).toString();
                    
                    Integer userId = userData.getUserIdByName(name);
                    if (userId == null) {
                        JOptionPane.showMessageDialog(rootPane, "User with name " + name + " not found.", "Data Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    int score;
                    if (scoreStr.equals("N/A")) {
                        score = -1;
                    } else {
                        try {
                            score = Integer.parseInt(scoreStr);
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Please enter a valid score for " + name, "Input Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    studentScoresForSave.add(new StudentSaveScore(userId, score));
                } catch (SQLException ex) {
                    Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            saveScores(selectedAssessment, details, studentScoresForSave);
            
            
        } catch (SQLException ex) {
            Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_scoresSaveButtonActionPerformed

    private void adminEnterScoresIntComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_adminEnterScoresIntComponentShown
         
       
    }//GEN-LAST:event_adminEnterScoresIntComponentShown

    private void aEnterScoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aEnterScoresActionPerformed
        scoresAssessList.setModel(populateAssessList());
        adminEnterScoresInt.setVisible(true);
    }//GEN-LAST:event_aEnterScoresActionPerformed

    private void scoresAssessListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_scoresAssessListValueChanged
         
            AssessmentName selectedAssessment = scoresAssessList.getSelectedValue();
            if (selectedAssessment != null) {
                try {
                    scoresGradesTable.setModel(populateStudentScoresTable(selectedAssessment.getAssessment_name()));
                } catch (SQLException ex) {
                    Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
                    System.err.println(ex);
                    JOptionPane.showMessageDialog(
                            rootPane, "Unable to get list of student scores.", "SQL Error", JOptionPane.ERROR_MESSAGE);
                        }
            }
        
        
    }//GEN-LAST:event_scoresAssessListValueChanged

    private void scoresCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoresCancelButtonActionPerformed
        adminEnterScoresInt.dispose();
    }//GEN-LAST:event_scoresCancelButtonActionPerformed

    private void teacherStudentViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_teacherStudentViewComponentShown
        sNatList1.setModel(populateTeacherStudentNatAssessList());
        sStateList1.setModel(populateTeacherStudentStateAssessList());
        sLocalList1.setModel(populateTeacherStudentLocalAssessList());        
        
    }//GEN-LAST:event_teacherStudentViewComponentShown

    private void newAssessNameBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessNameBox1ActionPerformed
       
    }//GEN-LAST:event_newAssessNameBox1ActionPerformed

    private void newAssessTypeBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessTypeBox1ActionPerformed
        
    }//GEN-LAST:event_newAssessTypeBox1ActionPerformed

    private void newAssessDateBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newAssessDateBox1MouseClicked
    newAssessDateBox1.setText("");
    }//GEN-LAST:event_newAssessDateBox1MouseClicked

    private void newAssessDateBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessDateBox1ActionPerformed
        
    }//GEN-LAST:event_newAssessDateBox1ActionPerformed

    private void newAssessSaveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessSaveButton1ActionPerformed
        
    }//GEN-LAST:event_newAssessSaveButton1ActionPerformed

    private void newAssessCancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssessCancelButton1ActionPerformed
        teacherAssessInt.dispose();
    }//GEN-LAST:event_newAssessCancelButton1ActionPerformed

    private void assessDeleteButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assessDeleteButton1ActionPerformed
        
    }//GEN-LAST:event_assessDeleteButton1ActionPerformed

    private void teacherAssessIntComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_teacherAssessIntComponentShown
        
        assessList1.setModel(populateTeacherAssessList(teacherName));
    }//GEN-LAST:event_teacherAssessIntComponentShown

    private void tEnterScoresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tEnterScoresButtonActionPerformed
        scoresAssessList1.setModel(populateTeacherAssessList(teacherName));
        teacherEnterScoresInt.setVisible(true);
    }//GEN-LAST:event_tEnterScoresButtonActionPerformed

    private void scoresAssessList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_scoresAssessList1ValueChanged
        AssessmentName selectedAssessment = scoresAssessList1.getSelectedValue();
            if (selectedAssessment != null) {
                try {
                    scoresGradesTable1.setModel(populateStudentScoresTable(selectedAssessment.getAssessment_name()));
                } catch (SQLException ex) {
                    Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
                    System.err.println(ex);
                    JOptionPane.showMessageDialog(
                            rootPane, "Unable to get list of student scores.", "SQL Error", JOptionPane.ERROR_MESSAGE);
                        }
            }
        
    }//GEN-LAST:event_scoresAssessList1ValueChanged

    private void scoresSaveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoresSaveButton1ActionPerformed
                                                            
        try {                                                 
            // Extract the selected value as AssessmentName object
            AssessmentName selectedAssessmentObject = (AssessmentName) scoresAssessList1.getSelectedValue();

            // Get the name from the AssessmentName object
            String selectedAssessment = selectedAssessmentObject.getAssessment_name();

            // Fetch assessment details right after the selected assessment is known
            AssessmentDetails details = null;
            try {
                details = userData.getAssessmentDetailsByName(selectedAssessment);
            } catch (SQLException ex) {
                Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Failed to get details for the selected assessment.", "Data Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (details == null) {
                JOptionPane.showMessageDialog(rootPane, "Assessment details not found for " + selectedAssessment, "Data Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            List<StudentSaveScore> studentScoresForSave = new ArrayList<>();
            for (int i = 0; i < scoresGradesTable1.getRowCount(); i++) {
                try {
                    String name = scoresGradesTable1.getValueAt(i, 0).toString();
                    String scoreStr = scoresGradesTable1.getValueAt(i, 1).toString();
                    
                    Integer userId = userData.getUserIdByName(name);
                    if (userId == null) {
                        JOptionPane.showMessageDialog(rootPane, "User with name " + name + " not found.", "Data Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    int score;
                    if (scoreStr.equals("N/A")) {
                        score = -1;
                    } else {
                        try {
                            score = Integer.parseInt(scoreStr);
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Please enter a valid score for " + name, "Input Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    studentScoresForSave.add(new StudentSaveScore(userId, score));
                } catch (SQLException ex) {
                    Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            saveScores(selectedAssessment, details, studentScoresForSave);
            
            
        } catch (SQLException ex) {
            Logger.getLogger(StudentRecordsModule.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_scoresSaveButton1ActionPerformed

    private void scoresCancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoresCancelButton1ActionPerformed
        teacherEnterScoresInt.dispose();
    }//GEN-LAST:event_scoresCancelButton1ActionPerformed

    private void teacherEnterScoresIntComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_teacherEnterScoresIntComponentShown
        
    }//GEN-LAST:event_teacherEnterScoresIntComponentShown

    //Creates a list of all users for the Admin Interface
    private ListModel<User> populateUserList(){
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet users = userData.selectAllUsers();
            while (users.next()) {
                User user = new User();
                user.setid(users.getInt("id"));
                user.setUserName(users.getString("USERNAME"));
                user.setFirstName(users.getString("firstName"));
                user.setLastName(users.getString("lastName"));
                user.setRole(users.getString("role")); 
                user.setUserPassword("password");
                
                listModel.addElement(user);
            }
        }catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of users.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    } 
    
    //Checking for correct date format
    private boolean isValidDate(String date) { 
    String regex = "^\\d{4}-\\d{2}-\\d{2}$";
    return date.matches(regex);
    }
    
    
    //Get user index when deleting user
    private int findUserIndex(User user) {
        for (int index=0; index < userList.getModel().getSize(); index++) {
            if (user.getID() == userList.getModel().getElementAt(index).getID()) {
                return index;
            }
        }
        System.out.println("-1");
        return -1;
    }
    
    //Populates a list of Assessments that are labeled National Assessments
    private ListModel<Assessment> populateNatAssessList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet Assessment = userData.selectNatAssessmentsByUser(userID);
            while (Assessment.next()) {
                Assessment assessment = new Assessment();
                assessment.setAssessment_name(Assessment.getString("assessment_name"));
                assessment.setDate(Assessment.getString("date"));
                assessment.setType(Assessment.getString("type"));
                assessment.setScore(Assessment.getInt("score"));
                assessment.setPercentile(Assessment.getInt("percentile"));
                
                
                listModel.addElement(assessment);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    
    //Populates a list of Assessments that are labeled State Assessments
    private ListModel<Assessment> populateStateAssessList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet Assessment = userData.selectStateAssessmentsByUser(userID);
            while (Assessment.next()) {
                Assessment assessment = new Assessment();
                assessment.setAssessment_name(Assessment.getString("assessment_name"));
                assessment.setDate(Assessment.getString("date"));
                assessment.setType(Assessment.getString("type"));
                assessment.setScore(Assessment.getInt("score"));
                assessment.setPercentile(Assessment.getInt("percentile"));
                
                
                listModel.addElement(assessment);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    //Populates a list of Assessments that are labeled Local Assessments
    private ListModel<LocalAssessment> populateLocalAssessList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet LocalAssessment = userData.selectLocalAssessmentsByUser(userID);
            while (LocalAssessment.next()) {
                LocalAssessment assessment = new LocalAssessment();
                assessment.setAssessment_name(LocalAssessment.getString("assessment_name"));
                assessment.setDate(LocalAssessment.getString("date"));
                assessment.setType(LocalAssessment.getString("type"));
                assessment.setScore(LocalAssessment.getInt("score"));
                
                
                
                listModel.addElement(assessment);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    //Generates a list of National Assessments for a Teacher in the TeacherStudentView Interface
    private ListModel<Assessment> populateTeacherStudentNatAssessList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet Assessment = userData.selectNatAssessmentsByUser(sUserID);
            while (Assessment.next()) {
                Assessment assessment = new Assessment();
                assessment.setAssessment_name(Assessment.getString("assessment_name"));
                assessment.setDate(Assessment.getString("date"));
                assessment.setType(Assessment.getString("type"));
                assessment.setScore(Assessment.getInt("score"));
                assessment.setPercentile(Assessment.getInt("percentile"));
                
                
                listModel.addElement(assessment);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    
    //Generates a list of State Assessments for a Teacher in the TeacherStudentView Interface
    private ListModel<Assessment> populateTeacherStudentStateAssessList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet Assessment = userData.selectStateAssessmentsByUser(sUserID);
            while (Assessment.next()) {
                Assessment assessment = new Assessment();
                assessment.setAssessment_name(Assessment.getString("assessment_name"));
                assessment.setDate(Assessment.getString("date"));
                assessment.setType(Assessment.getString("type"));
                assessment.setScore(Assessment.getInt("score"));
                assessment.setPercentile(Assessment.getInt("percentile"));
                
                
                listModel.addElement(assessment);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    //Generates a list of Local Assessments for a Teacher in the TeacherStudentView Interface
    private ListModel<LocalAssessment> populateTeacherStudentLocalAssessList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet LocalAssessment = userData.selectLocalAssessmentsByUser(sUserID);
            while (LocalAssessment.next()) {
                LocalAssessment assessment = new LocalAssessment();
                assessment.setAssessment_name(LocalAssessment.getString("assessment_name"));
                assessment.setDate(LocalAssessment.getString("date"));
                assessment.setType(LocalAssessment.getString("type"));
                assessment.setScore(LocalAssessment.getInt("score"));
                
                
                
                listModel.addElement(assessment);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    
    
    
      
    //Creates a list of Students belonging to a parent for the Parent Interface Combo Box
    private DefaultComboBoxModel<AcademicUser> populateStudentComboBox(int parentID) {
        DefaultComboBoxModel<AcademicUser> comboBoxModel = new DefaultComboBoxModel<>();
        try {
            ResultSet rs = userData.selectStudentsByParentId(parentID);
            while (rs.next()) {
                String name = rs.getString("firstName") + " " + rs.getString("lastName");
                int sUserID = rs.getInt("student_user_id");
                comboBoxModel.addElement(new AcademicUser(name, sUserID));
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of students to select.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        return comboBoxModel;
    }

    
    
    // Populates a list of Assessments that are labeled National Assessments in parent's interface
    private DefaultListModel<Assessment> populateParentNatAssessList() {
        DefaultListModel<Assessment> listModel = new DefaultListModel<>();
        try {
            
            AcademicUser selectedStudent = (AcademicUser) pStudentSelectBox.getSelectedItem(); 
            if (selectedStudent != null) { 
                int studentUserID = selectedStudent.getSUserID();

                ResultSet Assessment = userData.selectNatAssessmentsByUser(studentUserID);
                while (Assessment.next()) {
                    Assessment assessment = new Assessment();
                    assessment.setAssessment_name(Assessment.getString("assessment_name"));
                    assessment.setDate(Assessment.getString("date"));
                    assessment.setType(Assessment.getString("type"));
                    assessment.setScore(Assessment.getInt("score"));
                    assessment.setPercentile(Assessment.getInt("percentile"));

                    listModel.addElement(assessment);
                   
                    
                }
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        return listModel; 
    }

    
    
    // Populates a list of Assessments that are labeled National Assessments in parent's interface
    private DefaultListModel<Assessment> populateParentStateAssessList() {
        DefaultListModel<Assessment> listModel = new DefaultListModel<>();
        try {
            
            AcademicUser selectedStudent = (AcademicUser) pStudentSelectBox.getSelectedItem(); 
            if (selectedStudent != null) { 
                int studentUserID = selectedStudent.getSUserID();

                ResultSet Assessment = userData.selectStateAssessmentsByUser(studentUserID);
                while (Assessment.next()) {
                    Assessment assessment = new Assessment();
                    assessment.setAssessment_name(Assessment.getString("assessment_name"));
                    assessment.setDate(Assessment.getString("date"));
                    assessment.setType(Assessment.getString("type"));
                    assessment.setScore(Assessment.getInt("score"));
                    assessment.setPercentile(Assessment.getInt("percentile"));

                    listModel.addElement(assessment);
                }
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        return listModel; 
    }
    
    
    // Populates a list of Assessments that are labeled National Assessments in parent's interface
    private DefaultListModel<LocalAssessment> populateParentLocalAssessList() {
        DefaultListModel<LocalAssessment> listModel = new DefaultListModel<>();
        try {
            
            AcademicUser selectedStudent = (AcademicUser) pStudentSelectBox.getSelectedItem(); 
            if (selectedStudent != null) { 
                int studentUserID = selectedStudent.getSUserID();

                ResultSet LocalAssessment = userData.selectLocalAssessmentsByUser(studentUserID);
                while (LocalAssessment.next()) {
                LocalAssessment assessment = new LocalAssessment();
                assessment.setAssessment_name(LocalAssessment.getString("assessment_name"));
                assessment.setDate(LocalAssessment.getString("date"));
                assessment.setType(LocalAssessment.getString("type"));
                assessment.setScore(LocalAssessment.getInt("score"));
                    
                    listModel.addElement(assessment);
                }
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        return listModel; 
    }
    
    //Creates a list of All Assessments
    private ListModel<AssessmentName> populateAssessList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet AssessmentName = userData.selectAllAssessments();
            while (AssessmentName.next()) {
                AssessmentName assessmentName = new AssessmentName();
                assessmentName.setAssessment_name(AssessmentName.getString("assessment_name"));
                assessmentName.setDate(AssessmentName.getString("date"));
                assessmentName.setType(AssessmentName.getString("type"));
                
                
                
                listModel.addElement(assessmentName);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    //Creates a list of All Assessments related to a given teacher
    private ListModel<AssessmentName> populateTeacherAssessList(String teacherName) {
        DefaultListModel<AssessmentName> listModel = new DefaultListModel<>();

        try {
            teacherName = userData.getTeacherFullNameById(userID);
            ResultSet rs = userData.selectAssessmentsByTeacherName(teacherName);
            while (rs.next()) {
                AssessmentName assessmentName = new AssessmentName();
                assessmentName.setAssessment_name(rs.getString("assessment_name"));
                assessmentName.setDate(rs.getString("date"));
                assessmentName.setType(rs.getString("type"));
                listModel.addElement(assessmentName);
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of assessments for the teacher.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }

        return listModel;
    }


    
    //Clears the text field of the Assessment Interface
    private void clearAssessIntBoxes() {
        
        newAssessNameBox.setText("");
        newAssessDateBox.setText("YYYY-MM-DD");
        newAssessTypeBox.setSelectedIndex(0);
        
    }
    
    //Creates a list of all Students using Name and ID
    private ListModel<AcademicUser> populateStudentList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet rs = userData.selectAllStudents();
            while (rs.next()) {
                String name = rs.getString("firstName") + " " + rs.getString("lastName");
                int sUserID = rs.getInt("user_id");
                
                               
                
                listModel.addElement(new AcademicUser(name, sUserID));
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of students.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    
    //Creates a list of Teachers using Name and ID
    private ListModel<AcademicUser> populateTeacherList() {
        DefaultListModel listModel = new DefaultListModel();
        try {
            ResultSet rs = userData.selectAllTeachers();
            while (rs.next()) {
                String name = rs.getString("firstName") + " " + rs.getString("lastName");
                int ID = rs.getInt("id");
                
                               
                
                listModel.addElement(new AcademicUser(name, ID));
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of teachers.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return listModel;
    }
    
    
    //Returns a list of student results 
    private ListModel<StudentResults> populateStudentResults(StudentResults inputStudent) {
    DefaultListModel<StudentResults> listModel = new DefaultListModel<>();
    try {
        ResultSet resultSet = userData.classAssessmentResults(inputStudent);  

        while (resultSet.next()) {
            StudentResults studentResults = new StudentResults();  
            studentResults.setFirstName(resultSet.getString("student_firstName")); 
            studentResults.setLastName(resultSet.getString("student_lastName"));
            studentResults.setAssessment_name(resultSet.getString("assessment_name")); 
            studentResults.setDate(resultSet.getString("date")); 
            studentResults.setType(resultSet.getString("type")); 
            studentResults.setScore(resultSet.getInt("score"));  
            studentResults.setPercentile(resultSet.getInt("percentile")); 

            listModel.addElement(studentResults);
        }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                    rootPane, "Unable to get list of student assessments.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        return listModel;
    }

    
    
    //Creates a list of students belonging to a teacher
    private ListModel<AcademicUser> populateTeacherClass(int teacherID) {
        DefaultListModel<AcademicUser> listModel = new DefaultListModel<>();
        try {
            String teacherFullName = userData.getTeacherFullNameById(teacherID);

            if (teacherFullName == null) {
                JOptionPane.showMessageDialog(
                    rootPane, "Teacher not found.", "Error", JOptionPane.ERROR_MESSAGE);
                return listModel; 
            }

            ResultSet rs = userData.getStudentsByTeacherName(teacherFullName);
            while (rs.next()) {
                String name = rs.getString("firstName") + " " + rs.getString("lastName");
                int sUserID = rs.getInt("id"); 

                listModel.addElement(new AcademicUser(name, sUserID));
            }
        } catch (SQLException ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(
                rootPane, "Unable to get list of students by teacher ID.", "SQL Error", JOptionPane.ERROR_MESSAGE);
        }

        return listModel;
    }

    
    //Creates a list of scores belonging to students using the students name accompanied by their scores    
    public List<StudentScoreTable> populateStudentScores(String assessmentName) {
        List<StudentScoreTable> studentScores = new ArrayList<>();
        ResultSet resultSet = null;
        try {
            resultSet = userData.getStudentScoresByAssessment(assessmentName);

            while (resultSet.next()) {
                String studentName = resultSet.getString("firstName") + " " + resultSet.getString("lastName");
                String studentUserName = resultSet.getString("username");
                int score = resultSet.getInt("score");
                studentScores.add(new StudentScoreTable(studentName, score, studentUserName));
                System.out.println(studentScores.size());  // debug print
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            // handle exception or log it
        } finally {
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    // handle or log
                }
            }
        }
        return studentScores;
    }

    //method to save scores of students 
    public void saveScores(String assessmentName, AssessmentDetails details, List<StudentSaveScore> studentScoresForSave) throws SQLException {
        for (StudentSaveScore studentScore : studentScoresForSave) {
            if (userData.scoreExistsForStudent(assessmentName, studentScore.getId())) {
                userData.updateScore(assessmentName, studentScore);
            } else {
                userData.insertScore(assessmentName, details, studentScore);
            }
        }
    }


    //Creates a table of student scores for a specific assessment
    private DefaultTableModel populateStudentScoresTable(String assessmentName) throws SQLException {
        // Define column names
        String[] columnNames = {"Student Name", "Score"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0); // Initial row count is set to 0

        ResultSet resultSet = userData.getStudentScoresByAssessment(assessmentName);
        boolean hasData = false;  // Track if data exists

        while (resultSet.next()) {
            hasData = true;
            String studentName = resultSet.getString("firstName") + " " + resultSet.getString("lastName");
            int score = resultSet.getInt("score");
            Object[] row = {studentName, score};
            tableModel.addRow(row);
        }

        // Close the initial resultSet
        resultSet.close();

        // If we didn't find any scores
        if (!hasData) {
            resultSet = userData.selectAllStudents();
            while (resultSet.next()) {
                String studentName = resultSet.getString("firstName") + " " + resultSet.getString("lastName");
                Object[] row = {studentName, "N/A"}; // Using "N/A" as a placeholder value
                tableModel.addRow(row);
            }
        }

        // Make sure to close resultSet here too
        resultSet.close();

        return tableModel;
    }





        

    



    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentRecordsModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentRecordsModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentRecordsModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentRecordsModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StudentRecordsModule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aEnterScores;
    private javax.swing.JLabel aUserLabel;
    private javax.swing.JScrollPane aUserScrollPane;
    private javax.swing.JLabel adAssessLabel;
    private javax.swing.JList<AssessmentName> adAssessListByClass;
    private javax.swing.JList<AssessmentName> adAssessListByClass1;
    private javax.swing.JDialog adViewAssessInt;
    private javax.swing.JButton adViewAssessments;
    private javax.swing.JButton adViewButton;
    private javax.swing.JButton adViewClassButton;
    private javax.swing.JList<AcademicUser> adViewStudentList;
    private javax.swing.JList<AcademicUser> adViewTeacherList;
    private javax.swing.JDialog addNewUserInt;
    private javax.swing.JButton addUser;
    private javax.swing.JDialog adminEnterScoresInt;
    private javax.swing.JDialog administratorInterface;
    private javax.swing.JButton assessDeleteButton;
    private javax.swing.JButton assessDeleteButton1;
    private javax.swing.JDialog assessInt;
    private javax.swing.JList<AssessmentName> assessList;
    private javax.swing.JList<AssessmentName> assessList1;
    private javax.swing.JList<StudentResults> assessResults;
    private javax.swing.JList<StudentResults> assessResults1;
    private javax.swing.JDialog assessSelection;
    private javax.swing.JButton createNational;
    private javax.swing.JButton deleteUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton newAssessCancelButton;
    private javax.swing.JButton newAssessCancelButton1;
    private javax.swing.JFormattedTextField newAssessDateBox;
    private javax.swing.JFormattedTextField newAssessDateBox1;
    private javax.swing.JLabel newAssessDateLabel;
    private javax.swing.JLabel newAssessDateLabel1;
    private javax.swing.JTextField newAssessNameBox;
    private javax.swing.JTextField newAssessNameBox1;
    private javax.swing.JLabel newAssessNameLabel;
    private javax.swing.JLabel newAssessNameLabel1;
    private javax.swing.JButton newAssessSaveButton;
    private javax.swing.JButton newAssessSaveButton1;
    private javax.swing.JComboBox<String> newAssessTypeBox;
    private javax.swing.JComboBox<String> newAssessTypeBox1;
    private javax.swing.JLabel newAssessTypeLabel;
    private javax.swing.JLabel newAssessTypeLabel1;
    private javax.swing.JButton newCancelButton;
    private javax.swing.JTextField newFirstBox;
    private javax.swing.JLabel newFirstLabel;
    private javax.swing.JLabel newInfoLabel;
    private javax.swing.JTextField newLastBox;
    private javax.swing.JLabel newLastLabel;
    private javax.swing.JLabel newPassLabel;
    private javax.swing.JTextField newPasswordBox;
    private javax.swing.JComboBox<String> newRoleBox;
    private javax.swing.JLabel newRoleLabel;
    private javax.swing.JButton newSaveButton;
    private javax.swing.JLabel newUserLabel;
    private javax.swing.JTextField newUsernameBox;
    private javax.swing.JLabel pLocalLabel;
    private javax.swing.JList<LocalAssessment> pLocalList;
    private javax.swing.JScrollPane pLocalScrollPane;
    private javax.swing.JLabel pNatLabel;
    private javax.swing.JList<Assessment> pNatList;
    private javax.swing.JScrollPane pNatScrollPane;
    private javax.swing.JLabel pSelectStudentLabel;
    private javax.swing.JLabel pStateLabel;
    private javax.swing.JList<Assessment> pStateList;
    private javax.swing.JScrollPane pStateScrollPane;
    private javax.swing.JComboBox<AcademicUser> pStudentSelectBox;
    private javax.swing.JDialog parentInterface;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton resultsButton;
    private javax.swing.JButton resultsButton1;
    private javax.swing.JLabel sLocalLabel;
    private javax.swing.JLabel sLocalLabel1;
    private javax.swing.JList<LocalAssessment> sLocalList;
    private javax.swing.JList<LocalAssessment> sLocalList1;
    private javax.swing.JLabel sNatLabel;
    private javax.swing.JLabel sNatLabel1;
    private javax.swing.JList<Assessment> sNatList;
    private javax.swing.JList<Assessment> sNatList1;
    private javax.swing.JScrollPane sNatScrollPane;
    private javax.swing.JScrollPane sNatScrollPane1;
    private javax.swing.JLabel sStateLabel;
    private javax.swing.JLabel sStateLabel1;
    private javax.swing.JList<Assessment> sStateList;
    private javax.swing.JList<Assessment> sStateList1;
    private javax.swing.JScrollPane sStateScrollPane;
    private javax.swing.JScrollPane sStateScrollPane1;
    private javax.swing.JScrollPane sStateScrollPane2;
    private javax.swing.JScrollPane sStateScrollPane3;
    private javax.swing.JList<AssessmentName> scoresAssessList;
    private javax.swing.JList<AssessmentName> scoresAssessList1;
    private javax.swing.JButton scoresCancelButton;
    private javax.swing.JButton scoresCancelButton1;
    private javax.swing.JTable scoresGradesTable;
    private javax.swing.JTable scoresGradesTable1;
    private javax.swing.JButton scoresSaveButton;
    private javax.swing.JButton scoresSaveButton1;
    private javax.swing.JDialog studentInterface;
    private javax.swing.JButton tCreateLocalButton;
    private javax.swing.JButton tEnterScoresButton;
    private javax.swing.JLabel tStudentLabel;
    private javax.swing.JList<AcademicUser> tStudentList;
    private javax.swing.JScrollPane tStudentScrollPane;
    private javax.swing.JButton tViewClassScoreButton;
    private javax.swing.JButton tViewStudentScoreButton;
    private javax.swing.JDialog teacherAssessInt;
    private javax.swing.JDialog teacherAssessSelection;
    private javax.swing.JDialog teacherEnterScoresInt;
    private javax.swing.JDialog teacherInterface;
    private javax.swing.JDialog teacherStudentView;
    private javax.swing.JList<User> userList;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
